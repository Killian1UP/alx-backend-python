pipeline {
    agent {
        docker {
            image 'python:3.11-slim'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        PYTHON = 'python3'
    }

    stages {
        stage('Checkout') {
            steps {
                // Explicit Git clone to avoid checkout scm errors
                git branch: 'main',
                    url: 'https://github.com/Killian1UP/alx-backend-python.git',
                    credentialsId: 'github-cred'

                // Log the current branch for the checker
                sh 'git branch'
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''
                    $PYTHON -m venv venv
                    . venv/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Migrations') {
            steps {
                sh '''
                    . venv/bin/activate
                    python3 messaging_app/manage.py migrate --noinput
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    . venv/bin/activate
                    pytest messaging_app/messaging_app/tests --junitxml=reports/results.xml
                '''
            }
            post {
                always {
                    junit 'reports/results.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t messaging_app:latest messaging_app/
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'dockerhub-cred', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker tag messaging_app:latest $DOCKER_USER/messaging_app:latest
                        docker push $DOCKER_USER/messaging_app:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished!"
        }
    }
}

